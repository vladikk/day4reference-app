"use strict";exports.id=791,exports.ids=[791],exports.modules={9791:(e,s,o)=>{o.d(s,{fromSSO:()=>g});var n=o(8112),t=o(2792);const i="To refresh this SSO session run 'aws sso login' with the corresponding profile.",r={},a=e=>{if(e.expiration&&e.expiration.getTime()<Date.now())throw new n.Jh(`Token is expired. ${i}`,!1)},c=(e,s,o=!1)=>{if(void 0===s)throw new n.Jh(`Value not present for '${e}' in SSO Token${o?". Cannot refresh":""}. ${i}`,!1)};var l=o(9896);const{writeFile:w}=l.promises,f=new Date(0),d=(e={})=>async()=>{e.logger?.debug("@aws-sdk/token-providers","fromSso");const s=await(0,t.YU)(e),l=(0,t.Bz)(e),d=s[l];if(!d)throw new n.Jh(`Profile '${l}' could not be found in shared credentials file.`,!1);if(!d.sso_session)throw new n.Jh(`Profile '${l}' is missing required property 'sso_session'.`);const h=d.sso_session,u=(await(0,t.qw)(e))[h];if(!u)throw new n.Jh(`Sso session '${h}' could not be found in shared credentials file.`,!1);for(const e of["sso_start_url","sso_region"])if(!u[e])throw new n.Jh(`Sso session '${h}' is missing required property '${e}'.`,!1);u.sso_start_url;const g=u.sso_region;let S;try{S=await(0,t.vf)(h)}catch(e){throw new n.Jh(`The SSO session token associated with profile=${l} was not found or is invalid. ${i}`,!1)}c("accessToken",S.accessToken),c("expiresAt",S.expiresAt);const{accessToken:p,expiresAt:_}=S,m={token:p,expiration:new Date(_)};if(m.expiration.getTime()-Date.now()>3e5)return m;if(Date.now()-f.getTime()<3e4)return a(m),m;c("clientId",S.clientId,!0),c("clientSecret",S.clientSecret,!0),c("refreshToken",S.refreshToken,!0);try{f.setTime(Date.now());const e=await(async(e,s)=>{const{CreateTokenCommand:n}=await o.e(553).then(o.bind(o,3553)),t=await(async e=>{const{SSOOIDCClient:s}=await o.e(553).then(o.bind(o,3553));if(r[e])return r[e];const n=new s({region:e});return r[e]=n,n})(s);return t.send(new n({clientId:e.clientId,clientSecret:e.clientSecret,refreshToken:e.refreshToken,grantType:"refresh_token"}))})(S,g);c("accessToken",e.accessToken),c("expiresIn",e.expiresIn);const s=new Date(Date.now()+1e3*e.expiresIn);try{await((e,s)=>{const o=(0,t.C9)(e),n=JSON.stringify(s,null,2);return w(o,n)})(h,{...S,accessToken:e.accessToken,expiresAt:s.toISOString(),refreshToken:e.refreshToken})}catch(e){}return{token:e.accessToken,expiration:s}}catch(e){return a(m),m}},h=!1,u=async({ssoStartUrl:e,ssoSession:s,ssoAccountId:i,ssoRegion:r,ssoRoleName:a,ssoClient:c,clientConfig:l,profile:w})=>{let f;const u="To refresh this SSO session run aws sso login with the corresponding profile.";if(s)try{const e=await d({profile:w})();f={accessToken:e.token,expiresAt:new Date(e.expiration).toISOString()}}catch(e){throw new n.C1(e.message,h)}else try{f=await(0,t.vf)(e)}catch(e){throw new n.C1(`The SSO session associated with this profile is invalid. ${u}`,h)}if(new Date(f.expiresAt).getTime()-Date.now()<=0)throw new n.C1(`The SSO session associated with this profile has expired. ${u}`,h);const{accessToken:g}=f,{SSOClient:S,GetRoleCredentialsCommand:p}=await o.e(563).then(o.bind(o,2563)),_=c||new S(Object.assign({},l??{},{region:l?.region??r}));let m;try{m=await _.send(new p({accountId:i,roleName:a,accessToken:g}))}catch(e){throw n.C1.from(e,h)}const{roleCredentials:{accessKeyId:T,secretAccessKey:C,sessionToken:k,expiration:y,credentialScope:x}={}}=m;if(!(T&&C&&k&&y))throw new n.C1("SSO returns an invalid temporary credential.",h);return{accessKeyId:T,secretAccessKey:C,sessionToken:k,expiration:new Date(y),credentialScope:x}},g=(e={})=>async()=>{e.logger?.debug("@aws-sdk/credential-provider-sso","fromSSO");const{ssoStartUrl:s,ssoAccountId:o,ssoRegion:i,ssoRoleName:r,ssoSession:a}=e,{ssoClient:c}=e,l=(0,t.Bz)(e);if(s||o||i||r||a){if(s&&o&&i&&r)return u({ssoStartUrl:s,ssoSession:a,ssoAccountId:o,ssoRegion:i,ssoRoleName:r,ssoClient:c,clientConfig:e.clientConfig,profile:l});throw new n.C1('Incomplete configuration. The fromSSO() argument hash must include "ssoStartUrl", "ssoAccountId", "ssoRegion", "ssoRoleName"')}{const o=(await(0,t.YU)(e))[l];if(!o)throw new n.C1(`Profile ${l} was not found.`);if(!(w=o)||"string"!=typeof w.sso_start_url&&"string"!=typeof w.sso_account_id&&"string"!=typeof w.sso_session&&"string"!=typeof w.sso_region&&"string"!=typeof w.sso_role_name)throw new n.C1(`Profile ${l} is not configured with SSO credentials.`);if(o?.sso_session){const r=(await(0,t.qw)(e))[o.sso_session],a=` configurations in profile ${l} and sso-session ${o.sso_session}`;if(i&&i!==r.sso_region)throw new n.C1("Conflicting SSO region"+a,!1);if(s&&s!==r.sso_start_url)throw new n.C1("Conflicting SSO start_url"+a,!1);o.sso_region=r.sso_region,o.sso_start_url=r.sso_start_url}const{sso_start_url:r,sso_account_id:a,sso_region:f,sso_role_name:d,sso_session:h}=(e=>{const{sso_start_url:s,sso_account_id:o,sso_region:t,sso_role_name:i}=e;if(!(s&&o&&t&&i))throw new n.C1(`Profile is configured with invalid SSO credentials. Required parameters "sso_account_id", "sso_region", "sso_role_name", "sso_start_url". Got ${Object.keys(e).join(", ")}\nReference: https://docs.aws.amazon.com/cli/latest/userguide/cli-configure-sso.html`,!1);return e})(o);return u({ssoStartUrl:r,ssoSession:h,ssoAccountId:a,ssoRegion:f,ssoRoleName:d,ssoClient:c,clientConfig:e.clientConfig,profile:l})}var w}}};