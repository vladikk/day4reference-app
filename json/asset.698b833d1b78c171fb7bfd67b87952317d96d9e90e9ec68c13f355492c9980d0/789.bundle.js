"use strict";exports.id=789,exports.ids=[789],exports.modules={2789:(e,n,t)=>{t.d(n,{fromIni:()=>l});var o=t(2792),r=t(8112);const s=e=>Boolean(e)&&"object"==typeof e&&"string"==typeof e.aws_access_key_id&&"string"==typeof e.aws_secret_access_key&&["undefined","string"].indexOf(typeof e.aws_session_token)>-1,i=(e,n)=>(n?.logger?.debug("@aws-sdk/credential-provider-ini","resolveStaticCredentials"),Promise.resolve({accessKeyId:e.aws_access_key_id,secretAccessKey:e.aws_secret_access_key,sessionToken:e.aws_session_token,credentialScope:e.aws_credential_scope})),a=async(e,n,l,d={})=>{const c=n[e];if(Object.keys(d).length>0&&s(c))return i(c,l);if(f=c,Boolean(f)&&"object"==typeof f&&"string"==typeof f.role_arn&&["undefined","string"].indexOf(typeof f.role_session_name)>-1&&["undefined","string"].indexOf(typeof f.external_id)>-1&&["undefined","string"].indexOf(typeof f.mfa_serial)>-1&&((e=>"string"==typeof e.source_profile&&void 0===e.credential_source)(f)||(e=>"string"==typeof e.credential_source&&void 0===e.source_profile)(f)))return(async(e,n,s,i={})=>{s.logger?.debug("@aws-sdk/credential-provider-ini","resolveAssumeRoleCredentials (STS)");const l=n[e];if(!s.roleAssumer){const{getDefaultRoleAssumer:e}=await Promise.all([t.e(984),t.e(348)]).then(t.bind(t,2348));s.roleAssumer=e({...s.clientConfig,credentialProviderLogger:s.logger,parentClientConfig:s?.parentClientConfig},s.clientPlugins)}const{source_profile:d}=l;if(d&&d in i)throw new r.C1(`Detected a cycle attempting to resolve credentials for profile ${(0,o.Bz)(s)}. Profiles visited: `+Object.keys(i).join(", "),!1);const c=d?a(d,n,s,{...i,[d]:!0}):(await((e,n)=>{const o={EcsContainer:e=>t.e(897).then(t.bind(t,7897)).then((({fromContainerMetadata:n})=>n(e))),Ec2InstanceMetadata:e=>t.e(897).then(t.bind(t,7897)).then((({fromInstanceMetadata:n})=>n(e))),Environment:e=>t.e(904).then(t.bind(t,904)).then((({fromEnv:n})=>n(e)))};if(e in o)return o[e];throw new r.C1(`Unsupported credential source in profile ${n}. Got ${e}, expected EcsContainer or Ec2InstanceMetadata or Environment.`)})(l.credential_source,e)(s))(),f={RoleArn:l.role_arn,RoleSessionName:l.role_session_name||`aws-sdk-js-${Date.now()}`,ExternalId:l.external_id,DurationSeconds:parseInt(l.duration_seconds||"3600",10)},{mfa_serial:_}=l;if(_){if(!s.mfaCodeProvider)throw new r.C1(`Profile ${e} requires multi-factor authentication, but no MFA code callback was provided.`,!1);f.SerialNumber=_,f.TokenCode=await s.mfaCodeProvider(_)}const g=await c;return s.roleAssumer(g,f)})(e,n,l,d);var f;if(s(c))return i(c,l);if((e=>Boolean(e)&&"object"==typeof e&&"string"==typeof e.web_identity_token_file&&"string"==typeof e.role_arn&&["undefined","string"].indexOf(typeof e.role_session_name)>-1)(c))return(async(e,n)=>t.e(819).then(t.bind(t,7819)).then((({fromTokenFile:t})=>t({webIdentityTokenFile:e.web_identity_token_file,roleArn:e.role_arn,roleSessionName:e.role_session_name,roleAssumerWithWebIdentity:n.roleAssumerWithWebIdentity,logger:n.logger,parentClientConfig:n.parentClientConfig})())))(c,l);if((e=>Boolean(e)&&"object"==typeof e&&"string"==typeof e.credential_process)(c))return(async(e,n)=>t.e(109).then(t.bind(t,5109)).then((({fromProcess:t})=>t({...e,profile:n})())))(l,e);if((e=>e&&("string"==typeof e.sso_start_url||"string"==typeof e.sso_account_id||"string"==typeof e.sso_session||"string"==typeof e.sso_region||"string"==typeof e.sso_role_name))(c))return await(async(e,n={})=>{const{fromSSO:o}=await t.e(791).then(t.bind(t,9791));return o({profile:e,logger:n.logger})()})(e,l);throw new r.C1(`Profile ${e} could not be found or parsed in shared credentials file.`)},l=(e={})=>async()=>{e.logger?.debug("@aws-sdk/credential-provider-ini","fromIni");const n=await(0,o.YU)(e);return a((0,o.Bz)(e),n,e)}}};