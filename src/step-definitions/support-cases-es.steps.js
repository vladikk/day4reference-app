"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const cucumber_1 = require("@cucumber/cucumber");
const assert_1 = require("assert");
const support_case_1 = require("../domain/support-cases-es/support-case");
const support_case_id_1 = require("../domain/support-cases/support-case-id");
const case_status_1 = require("../domain/support-cases/case-status");
const customer_id_1 = require("../domain/customers/customer-id");
const agent_id_1 = require("../domain/agents/agent-id");
const domain_events_1 = require("../domain/core/domain-events");
const commands_1 = require("../domain/core/commands");
(0, cucumber_1.Given)('a valid new support case \\(es)', function () {
    let supportCase = createSupportCase(this.now);
    supportCase.committed();
    this.supportCaseES = supportCase;
});
(0, cucumber_1.Given)('an assigned support case \\(es)', function () {
    let supportCase = createSupportCase(this.now);
    let cmd = {
        aggregateId: supportCase.id,
        type: commands_1.CommandType.AssignAgent,
        agent: (0, agent_id_1.newAgentId)(),
        timestamp: this.now,
        metadata: {}
    };
    supportCase.execute(cmd);
    supportCase.committed();
    this.supportCaseES = supportCase;
});
(0, cucumber_1.Given)('the agent replies and changes the status to {word} \\(es)', function (statusName) {
    let status = parseCaseStatus(statusName);
    let supportCase = this.supportCaseES;
    let cmd = {
        aggregateId: supportCase.id,
        type: commands_1.CommandType.TrackAgentResponse,
        message: "I'm on it!",
        newStatus: status,
        timestamp: this.now,
        metadata: {}
    };
    supportCase.execute(cmd);
    supportCase.committed();
});
(0, cucumber_1.When)('a valid new support case is initialized \\(es)', function () {
    let supportCase = createSupportCase(this.now);
    this.supportCaseES = supportCase;
});
(0, cucumber_1.When)('an agent is assigned \\(es)', function () {
    var _a;
    let cmd = {
        aggregateId: this.supportCaseES.id,
        type: commands_1.CommandType.AssignAgent,
        agent: (0, agent_id_1.newAgentId)(),
        timestamp: this.now,
        metadata: {}
    };
    (_a = this.supportCaseES) === null || _a === void 0 ? void 0 : _a.execute(cmd);
});
(0, cucumber_1.When)('agent replies and changes the status to {word} \\(es)', function (statusName) {
    let status = parseCaseStatus(statusName);
    let supportCase = this.supportCaseES;
    let cmd = {
        aggregateId: supportCase.id,
        type: commands_1.CommandType.TrackAgentResponse,
        message: "I'm on it!",
        newStatus: status,
        timestamp: this.now,
        metadata: {}
    };
    supportCase.execute(cmd);
});
(0, cucumber_1.When)('customer replies \\(es)', async function () {
    let supportCase = this.supportCaseES;
    let cmd = {
        aggregateId: supportCase.id,
        type: commands_1.CommandType.TrackCustomerResponse,
        message: "I'm still on fire!",
        timestamp: this.now,
        metadata: {}
    };
    supportCase.execute(cmd);
});
(0, cucumber_1.Then)('agent assignment is requested \\(es)', function () {
    assertDomainEventExists(this.supportCaseES, domain_events_1.DomainEventType.AssignmentRequested);
});
(0, cucumber_1.Then)('status changes to {word} \\(es)', function (statusName) {
    assertStatus(this.supportCaseES, statusName);
});
(0, cucumber_1.Then)('message is sent to the customer \\(es)', async function () {
    assertDomainEventExists(this.supportCaseES, domain_events_1.DomainEventType.MessageSent);
});
(0, cucumber_1.Then)('message is sent to the assigned agent \\(es)', async function () {
    assertDomainEventExists(this.supportCaseES, domain_events_1.DomainEventType.MessageSent);
});
(0, cucumber_1.Then)('message is sent to the agent \\(es)', async function () {
    assertDomainEventExists(this.supportCaseES, domain_events_1.DomainEventType.MessageSent);
});
function assertDomainEventExists(supportCase, type) {
    const domainEvent = supportCase.newDomainEvents.find((e) => e.type === type);
    (0, assert_1.default)(domainEvent !== undefined, `Domain event of type ${type} not found`);
}
function assertStatus(supportCase, strStatus) {
    const expectedStatus = parseCaseStatus(strStatus);
    (0, assert_1.default)(supportCase.state.status.toString() === expectedStatus, `Status is not ${strStatus}`);
}
function createSupportCase(timestamp) {
    let cmd = {
        aggregateId: (0, support_case_id_1.newSupportCaseId)(),
        type: commands_1.CommandType.InitSupportCase,
        customer: (0, customer_id_1.newCustomerId)(),
        subject: "My printer is on fire!",
        messageBody: "Help!",
        timestamp: timestamp,
        metadata: {}
    };
    let supportCase = new support_case_1.SupportCase(cmd.aggregateId);
    supportCase.execute(cmd);
    return supportCase;
}
function parseCaseStatus(str) {
    return case_status_1.CaseStatus[str];
}
//# sourceMappingURL=data:application/json;base64,